basePath: /
definitions:
  models.ErrorResponse:
    properties:
      message:
        example: Descripción del error
        type: string
    type: object
  models.Image:
    properties:
      created_at:
        type: string
      format:
        description: Formato (jpeg, png, etc.)
        type: string
      height:
        description: Alto de la imagen
        type: integer
      image_id:
        type: integer
      name:
        type: string
      path:
        description: Ruta en el servidor
        type: string
      size:
        description: Tamaño en bytes
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_name:
        type: string
      width:
        description: Ancho de la imagen
        type: integer
    type: object
  models.ImageDetailResponse:
    properties:
      format:
        example: jpeg
        type: string
      height:
        example: 1080
        type: integer
      name:
        example: imagen123.jpg
        type: string
      size:
        example: 204800
        type: integer
      url:
        example: http://localhost:8080/images/rodrick/imagen123.jpg
        type: string
      width:
        example: 1920
        type: integer
    type: object
  models.PaginatedImagesResponse:
    properties:
      images:
        items:
          $ref: '#/definitions/models.Image'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  models.ResponseLogin:
    properties:
      token:
        type: string
    type: object
  models.TransformationRequest:
    properties:
      transformations:
        description: Transformaciones a aplicar a la imagen
        properties:
          crop:
            description: Recortar la imagen
            properties:
              height:
                description: |-
                  Alto del recorte
                  example: 300
                type: integer
              width:
                description: |-
                  Ancho del recorte
                  example: 400
                type: integer
              x:
                description: |-
                  Posición X del recorte
                  example: 100
                type: integer
              "y":
                description: |-
                  Posición Y del recorte
                  example: 50
                type: integer
            type: object
          filters:
            description: Filtros a aplicar
            properties:
              grayscale:
                description: |-
                  Convertir a escala de grises
                  example: true
                type: boolean
              sepia:
                description: |-
                  Aplicar filtro sepia
                  example: false
                type: boolean
            type: object
          format:
            description: |-
              Formato de salida de la imagen (png, jpg, gif)
              example: jpg
            type: string
          resize:
            description: Redimensionar la imagen
            properties:
              height:
                description: |-
                  Alto en píxeles
                  example: 600
                type: integer
              width:
                description: |-
                  Ancho en píxeles
                  example: 800
                type: integer
            type: object
          rotate:
            description: |-
              Rotar la imagen (en grados)
              example: 90
            type: number
        type: object
    type: object
  models.UploadResponse:
    properties:
      image:
        $ref: '#/definitions/models.UploadedImageDetail'
      message:
        example: Imagen subida exitosamente
        type: string
    type: object
  models.UploadedImageDetail:
    properties:
      format:
        example: jpeg
        type: string
      height:
        example: 1080
        type: integer
      name:
        example: imagen123.jpg
        type: string
      size:
        example: 204800
        type: integer
      url:
        example: http://localhost:8080/images/username/imagen123.jpg
        type: string
      width:
        example: 1920
        type: integer
    type: object
  models.User:
    properties:
      password:
        type: string
      user_name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Esta es una API para subir, transformar y consultar imágenes.
  title: API de Procesamiento de Imágenes
  version: "1.0"
paths:
  /image/{id}:
    get:
      description: Devuelve la metadata y URL de una imagen del usuario autenticado
      parameters:
      - description: ID de la imagen
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ImageDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Obtener información de una imagen
      tags:
      - images
  /images/{id}/transform:
    post:
      description: Aplica transformaciones (resize, crop, rotación, filtros) a una
        imagen previamente cargada por el usuario
      parameters:
      - description: ID de la imagen
        in: path
        name: id
        required: true
        type: integer
      - description: Parámetros de transformación
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.TransformationRequest'
      produces:
      - image/png
      - image/jpeg
      - image/gif
      responses:
        "200":
          description: Imagen transformada
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Aplica transformaciones a una imagen
      tags:
      - images
  /images/{rest}:
    get:
      description: Devuelve el archivo de imagen almacenado en el servidor desde la
        carpeta local "uploads", sin exponer su ruta real.
      parameters:
      - description: 'Ruta relativa de la imagen (por ejemplo: user123/imagen.jpg)'
        in: path
        name: rest
        required: true
        type: string
      produces:
      - image/jpeg
      - image/png
      - image/gif
      responses:
        "200":
          description: OK
          schema:
            type: file
        "403":
          description: Acceso prohibido
          schema:
            type: string
        "404":
          description: Archivo no encontrado
          schema:
            type: string
      summary: Servir imagen
      tags:
      - images
  /login:
    post:
      consumes:
      - application/json
      description: Autentica al usuario y devuelve un token JWT si las credenciales
        son correctas.
      parameters:
      - description: Credenciales de usuario
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ResponseLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Inicia sesión
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Crea un nuevo usuario en la base de datos con nombre de usuario
        y contraseña.
      parameters:
      - description: Datos del usuario a registrar
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Registra un nuevo usuario
      tags:
      - auth
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Permite a un usuario autenticado subir una imagen. Se guarda en
        MinIO y se almacena la metadata.
      parameters:
      - description: Imagen a subir (jpg, jpeg, png, gif)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Sube una imagen
      tags:
      - images
  /user-images:
    get:
      description: Devuelve las imágenes subidas por el usuario autenticado con soporte
        de paginación.
      parameters:
      - default: 1
        description: Número de página
        in: query
        name: page
        type: integer
      - default: 10
        description: Cantidad por página
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedImagesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Lista imágenes del usuario autenticado
      tags:
      - images
swagger: "2.0"
